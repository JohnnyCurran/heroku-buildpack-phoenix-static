#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

build_pack_dir=$(cd $(dirname $(dirname $0)); pwd)

### Configure environment

set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps


### Configure directories

mkdir -p $1 $2 $3 # Ensure dirs are present

build_dir=$(cd $1 && pwd)
cache_dir=$(cd $2 && pwd)
env_dir=$(cd $3 && pwd)
heroku_dir=$build_dir/.heroku

source ${build_pack_dir}/lib/common.sh
source ${build_pack_dir}/lib/build.sh


head "Loading configuration and environment"
load_previous_npm_node_versions
load_config
export_config_vars
export_mix_env

cached_node=$cache_dir/node-v$node_version-linux-x64.tar.gz

head "Installing binaries"
cleanup_cache
download_node
install_node
install_npm
if [ -f "$assets_dir/yarn.lock" ]; then
  install_yarn "$heroku_dir/yarn"
fi

### Begin custom phx buildpack ###
cd $build_dir/$phoenix_relative_path/$assets_path
npm i
node node_modules/tailwindcss/lib/cli.js --input=css/app.scss --output=../priv/static/assets/app.css --postcss
rm -rf node_modules
### End Buildpack 1 ###

#### Begin Elixir buildpack ####
set -e -o pipefail

# If this var is set to true later on,
# then elixir and rebar will be rebuilt
erlang_changed=false
rebar_changed=false
elixir_changed=false

build_pack_path=$(cd $(dirname $(dirname $0)); pwd)

# Ensure dirs are present
mkdir -p $1 $2 $3

build_path=$(cd $1 && pwd)
cache_path=$(cd $2 && pwd)
env_path=$(cd $3 && pwd)


source ${build_pack_path}/lib/path_funcs.sh
source ${build_pack_path}/lib/misc_funcs.sh
source ${build_pack_path}/lib/erlang_funcs.sh
source ${build_pack_path}/lib/elixir_funcs.sh
source ${build_pack_path}/lib/app_funcs.sh
source ${build_pack_path}/lib/canonical_version.sh

mkdir $(build_platform_tools_path)

export_env_vars
export_mix_env
export_mix_home
export_hex_home
load_config
check_erlang_version "$erlang_version"
check_elixir_version "$elixir_version"

check_stack
clean_cache

download_erlang
install_erlang

download_elixir
install_elixir
restore_mix
install_hex
install_rebar

# deprecated_hook, here for backwards compatibility
pre_compile_hook

restore_app
hook_pre_app_dependencies
app_dependencies
copy_hex

hook_pre_compile
compile_app
hook_post_compile

release_app

backup_app
backup_mix
write_profile_d_script
write_export

# deprecated_hook, here for backwards compatibility
post_compile_hook

#### End Elixir Buildpack ####

### Final step of Phoenix buildpack ###
head "Building dependencies"
install_and_cache_deps

compile

head "Finalizing build"
cache_versions
finalize_node

pwd
cd $phoenix_dir
pwd
mix assets.deploy
#### End Buildpacks ####